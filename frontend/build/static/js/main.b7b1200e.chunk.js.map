{"version":3,"sources":["features/PageWrapper.tsx","_helpers/fetchGrabber.ts","hooks.ts","features/personGrabber/grabberSlice.ts","features/personGrabber/PersonCard.tsx","features/personGrabber/styles/Themes.tsx","features/personGrabber/OptionsBar.tsx","features/personGrabber/PersonCardContainer.tsx","features/personGrabber/AddPersonPage.tsx","features/personGrabber/AddCarPage.tsx","features/Navbar.tsx","features/Footer.tsx","store.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["PageWrapper","styles","div","queryBody","url","a","fetch","method","body","JSON","stringify","mode","headers","result","status","console","log","Error","json","backendURL","fetchGrabber","useAppSelector","useSelector","grabberSlice","createSlice","name","initialState","visited","reducers","addPerson","state","action","indexOf","payload","length","shift","push","actions","getAge","dateString","today","Date","birthDate","age","getFullYear","m","getMonth","getDate","PersonCard","props","dispatch","useDispatch","useState","isHovering","setIsHovering","isOpen","setIsOpen","data","setData","getGenderImage","gender","useEffect","checkIfClickedOutside","event","document","addEventListener","removeEventListener","className","onClick","query","_id","then","res","person","getPersonData","onMouseEnter","onMouseLeave","Box","sx","display","justifyContent","p","src","alt","style","fontSize","birthdate","email","bio","cars","map","el","price","mainTheme","createTheme","palette","primary","main","typography","navbarTheme","OptionsBar","theme","useTheme","matches","useMediaQuery","breakpoints","up","ThemeProvider","flexFlow","alignItems","gap","borderColor","TextField","id","label","variant","onChange","setSearch","target","value","size","FormControl","color","InputLabel","Select","labelId","searchOption","setSearchOption","autoWidth","MenuItem","setGender","genders","element","Button","handleSearch","IconButton","setSort","sort","PersonCardContainer","pages","setPages","search","setGenders","currentPage","setCurrentPage","resetPage","people","catch","err","Math","ceil","generalPeopleInfo","distinct","alert","window","scrollTo","first_name","last_name","Stack","spacing","Pagination","count","page","shape","initialPerson","AddPersonPage","setPerson","setId","handleChange","noValidate","onSubmit","forms","querySelectorAll","preventDefault","Array","prototype","slice","call","forEach","form","checkValidity","createPerson","classList","add","stopPropagation","textAlign","type","pattern","required","placeholder","max","toISOString","split","disabled","initialCar","company","production_year","NaN","owner","AddCarPage","car","setCar","createCar","isNaN","min","now","Navbar","AppBar","position","bgcolor","Toolbar","Typography","noWrap","component","flexGrow","to","textDecoration","fontWeight","Footer","history","columns","listStyleType","index","store","configureStore","reducer","grabberReducer","App","basename","path","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b7b1200e.chunk.js","sourcesContent":["import styles from 'styled-components';\r\n\r\n\r\nconst PageWrapper = styles.div`\r\n\r\n    background-color: #282c34;\r\n    min-height: 100vh;\r\n    width: 100vw;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    flex: 1;\r\n    color: white;\r\n\r\n`;\r\n\r\nexport default PageWrapper;","/**\r\n * Helper function to perform fetch requests with graphql easily.\r\n * Throws an error if non-positive response.\r\n * @param queryBody graphql query / mutation\r\n * @param url pointer to server which handles request\r\n * @returns a promise of a json response\r\n */\r\nasync function fetchGrabber(queryBody: {query: String} , url: string) {\r\n    let result = await fetch(url, {\r\n        method: \"POST\",\r\n        body: JSON.stringify(queryBody),\r\n        mode: \"cors\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        }\r\n    })\r\n    if (result.status !== 200 && result.status !== 201) {\r\n        console.log(result)\r\n        throw new Error(\"Query illegal or could not connect to database!\")\r\n    }\r\n\r\n    return result.json()\r\n}\r\n\r\n// Constants\r\nconst port = 3001 || process.env.REACT_APP_BACKEND_PORT\r\nconst backendURL = `http://localhost:${port}/graphql`\r\n\r\nexport {backendURL}\r\n\r\nexport default fetchGrabber","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\r\nimport type { RootState, AppDispatch } from './store'\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\n// Resource from redux docs for skipping typing in TypeScript\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\r\nimport type { RootState } from '../../store'\r\n\r\ninterface GrabberState {\r\n  visited: string[]\r\n}\r\n\r\nconst initialState: GrabberState = {\r\n  visited: [],\r\n}\r\n\r\nexport const grabberSlice = createSlice({\r\n  name: 'grabber',\r\n  initialState,\r\n  reducers: {\r\n    addPerson: (state, action: PayloadAction<string>) => {\r\n      if (state.visited.indexOf(action.payload) < 0) {\r\n        if (state.visited.length < 12) {\r\n          state.visited.push(action.payload)\r\n        } else {\r\n          state.visited.shift()\r\n          state.visited.push(action.payload)\r\n        }\r\n      }\r\n    },\r\n  },\r\n})\r\n\r\nexport const { addPerson } = grabberSlice.actions\r\n\r\nexport const selectVisited = (state: RootState) => state.visited\r\n\r\nexport default grabberSlice.reducer","import \"bootstrap/dist/css/bootstrap.css\";\r\nimport React, { useState, useEffect } from 'react';\r\nimport fetchGrabber, { backendURL } from \"../../_helpers/fetchGrabber\";\r\nimport { useAppDispatch } from '../../hooks'\r\nimport { addPerson } from './grabberSlice'\r\nimport {Box} from '@mui/material';\r\nimport './styles/card.css';\r\n\r\ninterface PersonProps {\r\n    name: string;\r\n    birthdate: string;\r\n    gender: string;\r\n    _id: string;\r\n}\r\n\r\ninterface DataInterface {\r\n    bio: string;\r\n    email: string;\r\n    cars: {\r\n        name: string;\r\n        price: number;\r\n    }[],\r\n}\r\n\r\n//Source: https://www.codegrepper.com/code-examples/javascript/javascript+get+age+from+date\r\nfunction getAge(dateString: string) {\r\n    var today = new Date();\r\n    var birthDate = new Date(dateString);\r\n    var age = today.getFullYear() - birthDate.getFullYear();\r\n    var m = today.getMonth() - birthDate.getMonth();\r\n    if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\r\n        age--;\r\n    }\r\n    return age;\r\n}\r\n\r\n\r\n\r\nfunction PersonCard(props: PersonProps) {\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    const [isHovering, setIsHovering] = useState(false);\r\n    const [isOpen, setIsOpen] = useState(false)\r\n    const [data, setData] = useState<DataInterface>()\r\n\r\n    // Chooses image based on image\r\n    const getGenderImage = (): string => {\r\n        if (props.gender === \"Male\") {\r\n            return \"https://cdn-icons-png.flaticon.com/512/1536/1536865.png\";\r\n        } else if (props.gender === \"Female\") {\r\n            return \"https://cdn-icons-png.flaticon.com/512/1536/1536867.png\";\r\n        }\r\n        else {\r\n            return \"https://cdn-icons-png.flaticon.com/512/1536/1536870.png\";\r\n        }\r\n\r\n    }\r\n\r\n    // On state change\r\n    useEffect(() => {\r\n        const checkIfClickedOutside = (event: any) => {\r\n            if (isOpen) {\r\n                setIsOpen(false)\r\n            }\r\n        }\r\n        document.addEventListener(\"mouseup\", checkIfClickedOutside, true)\r\n        return () => {\r\n            document.removeEventListener(\"mouseup\", checkIfClickedOutside, true)\r\n        }\r\n    }, [isOpen, isHovering])\r\n\r\n    /**\r\n     * Gets missing information\r\n     */\r\n    const getPersonData = () => {\r\n        let queryBody = {\r\n            query: `\r\n                query {\r\n                    person (search:  [{value: \"${props._id}\", field:\"_id\"}]) {\r\n                        bio\r\n                        email\r\n                        cars {\r\n                            name\r\n                            price\r\n                        }\r\n                    }\r\n                }\r\n            `\r\n        }\r\n        fetchGrabber(queryBody, backendURL).then(res => {\r\n            setData(res.data.person);\r\n        })\r\n    }\r\n\r\n\r\n    /**\r\n     * Swappes between card states on click\r\n     */\r\n    const clickHandler = () => {\r\n        if (!isOpen) {\r\n            dispatch(addPerson(props.name))\r\n            getPersonData()\r\n            setIsOpen(true)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Chooses what type of card should be shown. Large one with extra info, or normal list version\r\n     * @returns \r\n     */\r\n    const chooseCardSetting = () => {\r\n\r\n        if (isOpen) {\r\n            return (\r\n                <div className=\"open\">\r\n                    <Box sx={{ display: 'flex', justifyContent: 'center', p: 2 }}>\r\n                        <img className=\"card-img-top\" src={getGenderImage()} alt=\"\" />\r\n                    </Box>\r\n                    <div className=\"card-body\">\r\n                        <h6 className=\"card-title\" style={{ fontSize: \"20px\" }}>{props.name}</h6>\r\n                        <p className=\"card-text\"><b>Age:</b> {getAge(props.birthdate)}</p>\r\n                        <p className=\"card-text\"><b>Gender:</b> {props.gender}</p>\r\n                        <p><b>Id:</b> {props._id}</p>\r\n                        <p><b>Email:</b> {data && data.email}</p>\r\n                        <p><b>About:</b> {data && data.bio}</p>\r\n                        {data && data.cars.length > 0 &&\r\n                            <div>\r\n                                <p><b>Cars:</b></p>\r\n                                <table>\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td>Name:</td>\r\n                                            <td>Price:</td>\r\n                                        </tr>\r\n                                        {data && data.cars.map(el => {\r\n                                            return (\r\n                                                <tr key={el.name}>\r\n                                                    <td>{el.name}</td>\r\n                                                    <td>{el.price}</td>\r\n                                                </tr>\r\n                                            )\r\n                                        })}\r\n                                    </tbody>\r\n                                </table>\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            )\r\n        } else {\r\n            return (\r\n                <header className=\"closed\">\r\n                    <img className=\"card-img-top\" src={getGenderImage()} alt=\"\" />\r\n                    <div className=\"card-body\">\r\n                        <h1 className=\"card-title\" style={{ fontSize: \"20px\" }}>{props.name}</h1>\r\n                        <p className=\"card-text\"><b>Age:</b> {getAge(props.birthdate)}</p>\r\n                        <p className=\"card-text\"><b>Gender:</b> {props.gender}</p>\r\n                    </div>\r\n                </header>\r\n            )\r\n\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n\r\n        <div className={`profile-card ${isOpen ? \"open-container\" : \"closed-container\"}`}\r\n            onClick={clickHandler}\r\n            onMouseEnter={() => setIsHovering(true)}\r\n            onMouseLeave={() => setIsHovering(false)}>\r\n            {chooseCardSetting()}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport {getAge}\r\nexport default PersonCard;","import { createTheme } from '@mui/material/styles'\r\n\r\n\r\nexport const mainTheme = createTheme({\r\n  palette: {\r\n    mode: \"dark\",\r\n    primary: {\r\n      main: \"#a7d5fa\"\r\n    }\r\n  },\r\n  typography: {\r\n    fontSize: 15,\r\n  }\r\n});\r\n\r\nexport const navbarTheme = createTheme({\r\n  palette: {\r\n    mode: \"light\",\r\n    primary: {\r\n      main: \"#63D471\"\r\n    }\r\n  },\r\n  typography: {\r\n    fontSize: 15\r\n  }\r\n})\r\n\r\n","import { SelectChangeEvent } from \"@mui/material/Select\";\r\nimport ArrowDownwardIcon from \"@mui/icons-material/ArrowDownward\";\r\nimport ArrowUpwardIcon from \"@mui/icons-material/ArrowUpward\";\r\nimport {\r\n  IconButton,\r\n  Button,\r\n  InputLabel,\r\n  MenuItem,\r\n  FormControl,\r\n  TextField,\r\n  Select,\r\n  Box,\r\n} from \"@mui/material\";\r\nimport { mainTheme } from \"./styles/Themes\";\r\nimport { ThemeProvider } from \"@mui/material/styles\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport useMediaQuery from \"@mui/material/useMediaQuery\";\r\n\r\ninterface OptionProps {\r\n  setSearch: (value: string) => void;\r\n  handleSearch: (resetPage?: boolean) => void;\r\n  setSearchOption: (value: string) => void;\r\n  searchOption: string;\r\n  setGender: (value: string) => void;\r\n  genders: string[];\r\n  gender: string;\r\n  setSort: (value: string) => void;\r\n  sort: string;\r\n}\r\n\r\n/**\r\n * Component to hold sorting, filtering and serting mekanisms\r\n * @param props handlers and states from parent\r\n * @returns \r\n */\r\nfunction OptionsBar(props: OptionProps) {\r\n  const theme = useTheme();\r\n  const matches = useMediaQuery(theme.breakpoints.up(\"sm\"));\r\n\r\n  const handleSearchOptionChange = (event: SelectChangeEvent) => {\r\n    props.setSearchOption(event.target.value);\r\n  };\r\n  const handleGenderOptionChange = (event: SelectChangeEvent) => {\r\n    props.setGender(event.target.value);\r\n  };\r\n\r\n  const toggleSort = () => {\r\n    props.setSort(props.sort === \"asc\" ? \"desc\" : \"asc\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"options-bar\">\r\n      <ThemeProvider theme={mainTheme}>\r\n        <Box\r\n          sx={{\r\n            display: \"flex\",\r\n            flexFlow: \"row wrap\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n            gap: \"10px\",\r\n            p: 2,\r\n            borderColor: \"white\",\r\n          }}\r\n        >\r\n          <Box>\r\n            <TextField\r\n              id=\"filled-basic\"\r\n              label=\"Search\"\r\n              variant=\"filled\"\r\n              onChange={(event) => props.setSearch(event.target.value)}\r\n              size={matches ? \"small\" : \"medium\"}\r\n            />\r\n          </Box>\r\n          <Box>\r\n            <FormControl variant=\"filled\" sx={{ color: \"third\" }}>\r\n              <InputLabel>Search on:</InputLabel>\r\n              <Select\r\n                labelId=\"demo-simple-select-autowidth-label\"\r\n                id=\"demo-simple-select-autowidth\"\r\n                value={props.searchOption}\r\n                onChange={handleSearchOptionChange}\r\n                autoWidth={true}\r\n                label=\"Age\"\r\n              >\r\n                <MenuItem value={\"first_name\"}>First name</MenuItem>\r\n                <MenuItem value={\"last_name\"}>Last name</MenuItem>\r\n                <MenuItem value={\"_id\"}>Person Id</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n          </Box>\r\n          <Box sx={{ p: 1 }}>\r\n            <FormControl variant=\"filled\">\r\n              <InputLabel>Set gender</InputLabel>\r\n              <Select\r\n                labelId=\"demo-simple-select-autowidth-label\"\r\n                id=\"demo-simple-select-autowidth\"\r\n                value={props.gender}\r\n                onChange={handleGenderOptionChange}\r\n                autoWidth={true}\r\n                label=\"Age\"\r\n              >\r\n                <MenuItem value=\"All\">All genders</MenuItem>\r\n                {props.genders &&\r\n                  props.genders.map((element: string) => {\r\n                    return (\r\n                      <MenuItem value={element} key={element}>\r\n                        {element}\r\n                      </MenuItem>\r\n                    );\r\n                  })}\r\n              </Select>\r\n            </FormControl>\r\n          </Box>\r\n          <Box>\r\n            <Button\r\n              variant=\"contained\"\r\n              onClick={() => props.handleSearch(true)}\r\n              size={matches ? \"small\" : \"medium\"}\r\n            >\r\n              Search\r\n            </Button>\r\n          </Box>\r\n\r\n          <Box>\r\n            <IconButton\r\n              color=\"primary\"\r\n              aria-label=\"Sort decending\"\r\n              size=\"large\"\r\n              onClick={toggleSort}\r\n            >\r\n              {props.sort === \"desc\" ? (\r\n                <ArrowDownwardIcon />\r\n              ) : (\r\n                <ArrowUpwardIcon />\r\n              )}\r\n            </IconButton>\r\n          </Box>\r\n        </Box>\r\n      </ThemeProvider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default OptionsBar;\r\n","import React, { useState, useEffect } from 'react';\r\n\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport Pagination from '@mui/material/Pagination';\r\nimport Stack from '@mui/material/Stack';\r\nimport Box from '@mui/material/Box';\r\nimport { ThemeProvider } from '@mui/material/styles';\r\n\r\nimport PersonCard from \"./PersonCard\";\r\nimport OptionsBar from \"./OptionsBar\"\r\nimport fetchGrabber, { backendURL } from \"../../_helpers/fetchGrabber\";\r\nimport { mainTheme } from \"./styles/Themes\";\r\nimport { useTheme } from '@mui/material/styles';\r\nimport useMediaQuery from '@mui/material/useMediaQuery';\r\n\r\nconst pageSize = 20\r\n\r\ninterface DataInterface {\r\n    _id: string,\r\n    first_name: string,\r\n    last_name: string,\r\n    gender: string,\r\n    birthdate: string\r\n}\r\n\r\nfunction PersonCardContainer() {\r\n\r\n    const [pages, setPages] = useState(10);\r\n    const [sort, setSort] = useState('desc');\r\n    const [search, setSearch] = useState(\"\");\r\n    const [searchOption, setSearchOption] = useState(\"first_name\");\r\n    const [genders, setGenders] = useState([])\r\n    const [gender, setGender] = useState(\"All\")\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [data, setData] = useState<DataInterface[]>()\r\n\r\n    /**\r\n     * Handles search requests\r\n     * @param resetPage set page to 1 or not\r\n     */\r\n    const handleSearch = (resetPage = false) => {\r\n        if (resetPage) {\r\n            setCurrentPage(1)\r\n        }\r\n        let queryBody = {\r\n            query: `\r\n                query {\r\n                    people(page:${currentPage}, search: [{value: \"${search}\", field:\"${searchOption}\"}, {value: \"${gender}\", field: \"${gender === \"All\" ? \"\" : \"gender\"}\"}], sort: {value: \"${sort}\", field: \"birthdate\"}) {\r\n                        _id\r\n                        first_name\r\n                        last_name\r\n                        birthdate\r\n                        gender\r\n                    }\r\n                }\r\n            `\r\n        }\r\n        fetchGrabber(queryBody, backendURL).then(res => {\r\n            setData(res.data.people);\r\n        }).catch(err => {\r\n            console.log(err)\r\n        })\r\n\r\n        queryBody = {\r\n            query: `\r\n                query {\r\n                    generalPeopleInfo(search: [{value: \"${search}\", field:\"${searchOption}\"}]) {\r\n                        size\r\n                    }\r\n                }\r\n            `\r\n        }\r\n        fetchGrabber(queryBody, backendURL).then((res) => {\r\n            setPages(Math.ceil(res.data.generalPeopleInfo.size / pageSize))\r\n        }).catch(err => {\r\n            console.log(err)\r\n        })\r\n    }\r\n    \r\n    const handleChange = (event: React.ChangeEvent<unknown>, value: number) => {\r\n        setCurrentPage(value);\r\n    };\r\n\r\n    // On page load\r\n    useEffect(() => {\r\n        let query = {\r\n            query: `\r\n            query {\r\n                generalPeopleInfo(distinct: \"gender\") {\r\n                    distinct\r\n                }\r\n            }\r\n            `\r\n        }\r\n        fetchGrabber(query, backendURL).then((res) => {\r\n            setGenders(res.data.generalPeopleInfo.distinct)\r\n        }).catch(err => {\r\n            alert(err)\r\n        })\r\n        \r\n    }, [])\r\n    \r\n    // On selected page change or sort change\r\n    useEffect(() => {\r\n        handleSearch()\r\n        window.scrollTo(0,0)\r\n    }, [currentPage, sort])\r\n\r\n    const theme = useTheme();\r\n    const matches = useMediaQuery(theme.breakpoints.up('sm'));\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <OptionsBar\r\n                setSearch={setSearch}\r\n                handleSearch={handleSearch}\r\n                setSearchOption={setSearchOption}\r\n                setGender={setGender}\r\n                gender={gender}\r\n                genders={genders}\r\n                searchOption={searchOption}\r\n                sort={sort}\r\n                setSort={setSort} />\r\n            <Box sx={{ display: 'flex', justifyContent: 'center', p: 1, flexFlow: 'row wrap'}}>\r\n                {data && data.map(el => {\r\n                    return <PersonCard _id={el._id} name={el.first_name + \" \" + el.last_name} birthdate={el.birthdate} gender={el.gender} key={el._id}></PersonCard>\r\n                })}\r\n            </Box>\r\n\r\n\r\n            <Box sx={{ display: 'flex', justifyContent: 'center', p: 1}}>\r\n                <Box>\r\n                    <Stack spacing={4}>\r\n                        <ThemeProvider theme={mainTheme}>\r\n                            <Pagination count={pages} page={currentPage} onChange={handleChange} variant=\"outlined\" shape=\"rounded\" color=\"secondary\"\r\n                            size = {matches ? \"large\" : \"small\"} />\r\n                        </ThemeProvider>\r\n                    </Stack>\r\n                </Box>\r\n            </Box>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PersonCardContainer;","import React, { useState, useEffect } from \"react\";\r\nimport fetchGrabber from \"../../_helpers/fetchGrabber\";\r\n\r\nconst port = 3001 || process.env.REACT_APP_BACKEND_PORT\r\nconst backendURL = `http://localhost:${port}/graphql`\r\n\r\nconst initialPerson = {\r\n  first_name: \"\",\r\n  last_name: \"\",\r\n  email: \"\",\r\n  birthdate: \"\",\r\n  gender: \"Male\",\r\n  bio: \"\"\r\n}\r\n\r\ninterface PersonInterface {\r\n  first_name: string\r\n  last_name: string\r\n  email: string\r\n  birthdate: string\r\n  gender: string\r\n  bio: string\r\n}\r\n\r\n/**\r\n * Page for adding new persons\r\n * @returns new page\r\n */\r\n\r\nfunction AddPersonPage() {\r\n\r\n  const [person, setPerson] = useState<PersonInterface>(initialPerson)\r\n  const [id, setId] = useState(\"\")\r\n\r\n  const [genders, setGenders] = useState([\"Male\", \"Female\"])\r\n\r\n  useEffect(() => {\r\n    let query = {\r\n      query: `\r\n          query {\r\n              generalPeopleInfo(distinct: \"gender\") {\r\n                  distinct\r\n              }\r\n          }\r\n      `\r\n  }\r\n  fetchGrabber(query, backendURL).then((res)=>{\r\n      setGenders(res.data.generalPeopleInfo.distinct)\r\n  })\r\n  }, [])\r\n\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement|HTMLSelectElement|HTMLTextAreaElement>) => {\r\n    setPerson({ ...person, [event.target.name]: event.target.value })\r\n  }\r\n\r\n\r\n  const submitForm = (event: React.FormEvent<HTMLFormElement>) => {\r\n    \r\n    var forms = document.querySelectorAll('.needs-validation')\r\n\r\n    // Preventing the page from reloading\r\n    event.preventDefault();\r\n\r\n    //Check validation all the input fields\r\n    Array.prototype.slice.call(forms)\r\n      .forEach(function (form) {\r\n          if (!form.checkValidity()) {\r\n            form.classList.add(\"was-validated\")\r\n            event.stopPropagation();\r\n          }\r\n          else {\r\n            let queryBody = {\r\n              query: `\r\n                mutation {\r\n                  createPerson(data: {\r\n                    first_name: \"${person.first_name}\"\r\n                    last_name: \"${person.last_name}\"\r\n                    email: \"${person.email}\"\r\n                    birthdate: \"${person.birthdate}\"\r\n                    gender: \"${person.gender}\"\r\n                    bio: \"${person.bio}\"\r\n                  }) {\r\n                    _id\r\n                    first_name\r\n                  }\r\n                }\r\n              `\r\n            }\r\n            fetchGrabber(queryBody, backendURL).then(res => {\r\n              setPerson(initialPerson)\r\n              setId(res.data.createPerson._id)\r\n            }).catch(err => {\r\n              alert(err)\r\n            })\r\n          }\r\n        }, false)\r\n  }\r\n\r\n\r\n  return (\r\n\r\n    <form className=\"needs-validation\" noValidate onSubmit={submitForm} style={{textAlign: \"center\"}}>\r\n      <h3>Add a new person <span className=\"label label-default\"></span></h3>\r\n      <div className=\"col-md-12\">\r\n        <input value={person.first_name} type=\"text\" pattern=\"[a-zA-ZæøåÆØÅöÖÄäëË]{2,20}\" className=\"form-control mt-3\" required placeholder=\"First Name\" name=\"first_name\" onChange={handleChange} />\r\n      </div>\r\n      <div className=\"invalid-feedback\">Please enter a valid first name</div>\r\n      <div className=\"col-md-12\">\r\n        <input value={person.last_name} type=\"text\" pattern=\"[a-zA-ZæøåÆØÅöÖÄäëË]{2,20}\" className=\"form-control mt-3\" required placeholder=\"Last Name\" name=\"last_name\" onChange={handleChange} />\r\n      </div>\r\n      <div className=\"invalid-feedback\">Please enter a valid last name</div>\r\n      <div className=\"col-md-12\">\r\n        <input value={person.email} type=\"text\" pattern=\"^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$\" className=\"form-control mt-3\" required placeholder=\"Email adress\" name=\"email\" onChange={handleChange} />\r\n      </div>\r\n      <div className=\"invalid-feedback\">Please enter a valid email</div>\r\n      <div className=\"col-md-12\">\r\n        <input value={person.birthdate} type=\"date\" required max={new Date().toISOString().split('T')[0]} className=\"form-control mt-3\" placeholder=\"Date of birth\" name=\"birthdate\" onChange={handleChange} />\r\n      </div>\r\n      <div className=\"invalid-feedback\">Please enter a valid date</div>\r\n      <div className=\"form-group\">\r\n        <select value={person.gender} className=\"form-select mt-3\" name=\"gender\" onChange={handleChange} >\r\n          <option disabled value=\"\">Gender</option>\r\n          {genders && genders.map(el => {return <option value={el} key={el}>{el}</option>})}\r\n        </select>\r\n      </div>\r\n      <div className=\"invalid-feedback\">Please select a gender</div>\r\n      <div className=\"col-md-12\">\r\n        <textarea value={person.bio} required className=\"form-control mt-3\" placeholder=\"Biography\" name=\"bio\" onChange={handleChange}></textarea>\r\n      </div>\r\n      <div  className=\"invalid-feedback\">Bio cant be empty</div>\r\n\r\n      <button type=\"submit\" id=\"submit\" className=\"btn btn-primary mt-3 mx-3\" >Add Person</button>\r\n      {id && (\r\n        <><div className=\"alert alert-success alert-dismissible d-flex align-items-center fade show mt-3\">\r\n          <i className=\"bi-check-circle-fill\"></i>\r\n          <strong className=\"mx-2\">Success!</strong> New person id: <br/> {id}\r\n        </div></>\r\n      )}\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default AddPersonPage\r\n\r\n\r\n\r\n","import React, { useState } from \"react\";\r\nimport fetchGrabber, { backendURL } from \"../../_helpers/fetchGrabber\";\r\n\r\ninterface CarInterface {\r\n  name: string\r\n  company: string\r\n  production_year: number\r\n  price: number\r\n  owner: string\r\n}\r\n\r\nconst initialCar: CarInterface = {\r\n  name: \"\",\r\n  company: \"\",\r\n  production_year: NaN,\r\n  price: NaN,\r\n  owner: \"\"\r\n}\r\n\r\n/**\r\n * Page for adding new cars\r\n * @returns new page\r\n */\r\nfunction AddCarPage() {\r\n\r\n  const [car, setCar] = useState<CarInterface>(initialCar)\r\n  const [id, setId] = useState()\r\n\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {\r\n    setCar({ ...car, [event.target.name]: event.target.value })\r\n  }\r\n\r\n\r\n  const submitForm = (event: React.FormEvent<HTMLFormElement>) => {\r\n    \r\n    var forms = document.querySelectorAll('.needs-validation')\r\n\r\n    // Preventing the page from reloading\r\n    event.preventDefault();\r\n\r\n    // Check validation on all input fields\r\n    Array.prototype.slice.call(forms)\r\n      .forEach(function (form) {\r\n          if (!form.checkValidity()) {\r\n            form.classList.add(\"was-validated\")\r\n            event.stopPropagation();\r\n          }\r\n          else {\r\n            let queryBody = {\r\n              query: `\r\n                mutation {\r\n                  createCar(data: {\r\n                    name: \"${car.name}\"\r\n                    company: \"${car.company}\"\r\n                    production_year: ${car.production_year}\r\n                    price: ${car.price}\r\n                    owner: \"${car.owner}\"\r\n                  }) {\r\n                    _id\r\n                  }\r\n                }\r\n              `\r\n            }\r\n            fetchGrabber(queryBody, backendURL).then(res => {\r\n              setCar(initialCar)\r\n              setId(res.data.createCar._id)\r\n            }).catch(err => {\r\n              alert(\"You need a valid persons id!\")\r\n            })\r\n          }\r\n        }, false)\r\n  }\r\n\r\n\r\n  return (\r\n\r\n    <form onSubmit={submitForm} noValidate className=\"needs-validation\" style={{textAlign: \"center\"}}>\r\n      <h3>Add a new car <span className=\"label label-default\"></span></h3>\r\n      <div className=\"col-md-12\">\r\n        <input id=\"nameField\" value={car.name} type=\"text\" required pattern=\"[a-zA-Z0-9]{2,20}\" className=\"form-control mt-3\" placeholder=\"Car model\" name=\"name\" onChange={handleChange}/>\r\n      </div>\r\n      <div className=\"invalid-feedback\">Please enter a valid car model</div>\r\n      <div className=\"col-md-12\">\r\n        <input value={car.company} type=\"text\" required pattern=\"[a-zA-Z0-9]{2,20}\" className=\"form-control mt-3\" placeholder=\"Manufactorer\" name=\"company\" onChange={handleChange}/>\r\n      </div>\r\n      <div className=\"invalid-feedback\">Please pick a car manufactorer</div>\r\n      <div className=\"col-md-12\">\r\n        <input value={isNaN(car.production_year) ? \"\" : car.production_year} type=\"number\" required pattern=\"[0-9{4}]\" min=\"1900\" max={`${new Date(Date.now()).getFullYear() + 1}`} className=\"form-control mt-3\" placeholder=\"Production year\" name=\"production_year\" onChange={handleChange}/>\r\n      </div>\r\n      <div className=\"invalid-feedback\">Production year on form YYYY</div>\r\n      <div className=\"col-md-12\">\r\n        <input value={isNaN(car.price) ? \"\" : car.price} type=\"number\" required min=\"0\" className=\"form-control mt-3\" placeholder=\"Price\" name=\"price\" onChange={handleChange}/>\r\n      </div>\r\n      <div className=\"invalid-feedback\">Enter a valid price</div>\r\n      <div className=\"col-md-12\">\r\n        <input value={car.owner} type=\"text\" required className=\"form-control mt-3\" placeholder=\"Owner ID\" name=\"owner\" onChange={handleChange}/>\r\n      </div>\r\n      <div className=\"invalid-feedback\">Enter an owner id</div>\r\n      <button type=\"submit\" id=\"submit\" className=\"btn btn-primary mt-3 mx-3\" >Add car</button>\r\n      {id && (\r\n        <><div className=\"alert alert-success alert-dismissible d-flex align-items-center fade show mt-3\">\r\n          <i className=\"bi-check-circle-fill\"></i>\r\n          <strong className=\"mx-2\">Success!</strong> Car added to id: <br/> {id}\r\n        </div></>\r\n      )}\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default AddCarPage","import { AppBar, Toolbar, Typography } from '@mui/material';\r\nimport { Link } from \"react-router-dom\"\r\nimport { navbarTheme } from './personGrabber/styles/Themes';\r\nimport React from 'react';\r\n\r\nimport { ThemeProvider } from 'styled-components';\r\n\r\n/**\r\n * Navbar element with page routing\r\n * @returns \r\n */\r\nconst Navbar = () => {\r\n\treturn (\r\n\t\t<ThemeProvider theme={navbarTheme}>\r\n\t\t\t<AppBar \r\n\t\t\t\tposition=\"static\"\r\n\t\t\t\tsx= {{\r\n\t\t\t\t\tbgcolor: \"#63D471\",\r\n\t\t\t\t\tdisplay: \"flex\",\r\n\t\t\t\t\tflexFlow: \"row wrap\"\r\n\t\t\t\t}}\t\r\n\t\t\t>\r\n\t\t\t\t<Toolbar>\r\n\t\t\t\t\t<Typography\r\n\t\t\t\t\t\tvariant=\"h6\"\r\n\t\t\t\t\t\tnoWrap\r\n\t\t\t\t\t\tcomponent=\"div\"\r\n\t\t\t\t\t\tsx={{ \r\n\t\t\t\t\t\t\tflexGrow: 1, \r\n\t\t\t\t\t\t\tdisplay: \"flex\",\r\n\t\t\t\t\t\t\tflexFlow: \"row wrap\",\r\n\t\t\t\t\t\t\tjustifyContent: \"flex-start\",\r\n\t\t\t\t\t\t\talignItems: \"flex-end\",\r\n\t\t\t\t\t\t\tgap: \"20px\",\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<Link to=\"/\" style={{ textDecoration: 'none', color: \"white\", fontWeight: \"bold\", fontSize: \"24px\" }}>Person grabber</Link>\r\n\t\t\t\t\t\t<Link to=\"/add-person\" style={{ textDecoration: 'none', color: \"white\", fontSize: \"20px\"}}>Add person</Link>\r\n\t\t\t\t\t\t<Link to=\"/add-car\" style={{ textDecoration: 'none', color: \"white\", fontSize: \"20px\"}}>Add car</Link>\r\n\r\n\t\t\t\t\t</Typography>\r\n\r\n\t\t\t\t</Toolbar>\r\n\t\t\t</AppBar >\r\n\t\t</ThemeProvider>\r\n\t);\r\n};\r\n\r\nexport default Navbar;","import React from \"react\";\r\nimport './personGrabber/styles/footer.css'\r\nimport { useAppSelector } from '../hooks'\r\n\r\n/**\r\n * Footer containing clicked people history\r\n * @returns \r\n */\r\nfunction Footer() {\r\n\r\n    const history = useAppSelector((state) => state.visited)\r\n    var columns = () => {\r\n        switch (history.length) {\r\n            case 1:\r\n                return 1\r\n            case 2:\r\n                return 2\r\n            default:\r\n                return (history.length < 7) ? 3 : 4\r\n        }\r\n    }\r\n\r\n    return (\r\n        <footer className=\"footer\" >\r\n            <h4>Clicked people history:</h4>\r\n            <ul style={{columns: columns(), listStyleType: \"none\"}}>\r\n                {history && history.map((el, index) => {\r\n                    return <li key={`Person: ${index}`}>{el}</li>\r\n                })}\r\n            </ul>\r\n        </footer>\r\n    );\r\n\r\n}\r\nexport default Footer\r\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport grabberReducer from './features/personGrabber/grabberSlice'\r\n\r\nconst store = configureStore({\r\n  reducer: grabberReducer,\r\n})\r\n\r\n// Infer the `RootState` and `AppDispatch` types from the store itself\r\nexport type RootState = ReturnType<typeof store.getState>\r\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\r\nexport type AppDispatch = typeof store.dispatch\r\n\r\nexport default store","import \"bootstrap/dist/css/bootstrap.css\";\r\nimport { HashRouter, Switch, Route } from 'react-router-dom';\r\n\r\nimport PageWrapper from './features/PageWrapper';\r\nimport PersonCardContainer from './features/personGrabber/PersonCardContainer';\r\nimport AddPersonPage from './features/personGrabber/AddPersonPage';\r\nimport AddCarPage from './features/personGrabber/AddCarPage';\r\nimport Navbar from './features/Navbar';\r\nimport Footer from './features/Footer'\r\nimport { Provider } from 'react-redux';\r\nimport store from './store'\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <Provider store={store}>\r\n      <HashRouter basename=\"/\">\r\n        <Navbar />\r\n        <PageWrapper>\r\n          <Switch>\r\n            <Route path='/' exact component={PersonCardContainer} />\r\n            <Route path='/add-person' component={AddPersonPage} />\r\n            <Route path='/add-car' component={AddCarPage} />\r\n          </Switch>\r\n        </PageWrapper>\r\n        <Footer/>\r\n      </HashRouter>\r\n    </Provider>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}